import React, { useState, useEffect } from 'react';
import {
  Book,
  FileText,
  MessageCircle,
  BarChart,
  UploadCloud,
  ChevronRight,
  ChevronDown,
  Sparkles,
  Zap,
  HelpCircle,
  Volume2,
} from 'lucide-react';

// The main App component for StudyMate. All UI and logic are self-contained.
const App = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [inputQuestion, setInputQuestion] = useState('');
  const [summary, setSummary] = useState(null);
  const [practiceQuestions, setPracticeQuestions] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [audioPlayer, setAudioPlayer] = useState(null);

  // Gemini API configuration
  const API_KEY = ""; // Do not change.
  const API_URL_FLASH = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
  const API_URL_TTS = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${API_KEY}`;

  // Mock data to simulate the content extracted from a PDF.
  // In a real app, this would be the actual text from a processed PDF.
  const mockProcessedPdf = {
    title: 'Biology 101 - Chapter 3: Cell Structure',
    content: "The cell is the basic structural and functional unit of all known living organisms. It is the smallest unit of life. All cells are composed of cytoplasm enclosed within a membrane, which contains many biomolecules such as proteins and nucleic acids. Most plant and animal cells are only visible under a light microscope. The nucleus contains the genetic material of the cell in the form of chromosomes. The mitochondria are the 'powerhouses' of the cell, generating most of the cell's supply of adenosine triphosphate (ATP). The cell wall is a structural layer surrounding some types of cells, just outside the cell membrane. It is tough, flexible, and sometimes rigid.",
    recentQuestions: [
      { id: 1, text: 'What are the main parts of a cell?' },
      { id: 2, text: 'What is the function of the cell wall?' },
    ],
  };

  // Utility function to convert PCM audio to a WAV file Blob.
  const pcmToWav = (pcmData, sampleRate) => {
    const pcm16 = new Int16Array(pcmData);
    const buffer = new ArrayBuffer(44 + pcm16.length * 2);
    const view = new DataView(buffer);
    const writeString = (view, offset, string) => {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    };
    let offset = 0;
    writeString(view, offset, 'RIFF'); offset += 4;
    view.setUint32(offset, 36 + pcm16.length * 2, true); offset += 4;
    writeString(view, offset, 'WAVE'); offset += 4;
    writeString(view, offset, 'fmt '); offset += 4;
    view.setUint32(offset, 16, true); offset += 4;
    view.setUint16(offset, 1, true); offset += 2;
    view.setUint16(offset, 1, true); offset += 2;
    view.setUint32(offset, sampleRate, true); offset += 4;
    view.setUint32(offset, sampleRate * 2, true); offset += 4;
    view.setUint16(offset, 2, true); offset += 2;
    view.setUint16(offset, 16, true); offset += 2;
    writeString(view, offset, 'data'); offset += 4;
    view.setUint32(offset, pcm16.length * 2, true); offset += 4;
    for (let i = 0; i < pcm16.length; i++) {
      view.setInt16(offset, pcm16[i], true);
      offset += 2;
    }
    return new Blob([view], { type: 'audio/wav' });
  };

  // Function to simulate a file upload.
  const handleFileUpload = (event) => {
    // In a real app, this would send the file to a backend for processing.
    // Here, we just set the mock data to simulate a successful upload.
    setUploadedFile(mockProcessedPdf);
    setActiveTab('study');
    setSummary(null);
    setPracticeQuestions(null);
  };

  // Function to handle the user's question and get an AI response from Gemini.
  const handleAskQuestion = async (e) => {
    e.preventDefault();
    if (!inputQuestion.trim() || !uploadedFile) return;

    const userQuestion = inputQuestion.trim();
    const newQuestion = {
      id: questions.length + 1,
      text: userQuestion,
      isUser: true,
    };
    setQuestions([...questions, newQuestion]);
    setInputQuestion('');
    setIsLoading(true);

    try {
      const payload = {
        contents: [
          {
            parts: [
              {
                text: `You are a study assistant. Answer the following question based ONLY on the provided document content. If the information is not in the document, say "I could not find the answer to that question in the document.".
                
                Document Content: ${uploadedFile.content}
                
                Question: ${userQuestion}`
              }
            ]
          }
        ],
        tools: [{ "google_search": {} }] // Enable Google Search grounding
      };

      const response = await fetch(API_URL_FLASH, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();
      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;
      
      const newAnswer = {
        id: questions.length + 2,
        text: text || "An error occurred while getting the answer.",
        isUser: false,
      };
      setQuestions((prev) => [...prev, newAnswer]);

    } catch (error) {
      console.error("Error fetching AI response:", error);
      const newError = {
        id: questions.length + 2,
        text: "Sorry, something went wrong. Please try again.",
        isUser: false,
      };
      setQuestions((prev) => [...prev, newError]);
    } finally {
      setIsLoading(false);
    }
  };

  // Function to generate and display the chapter summary using Gemini API.
  const handleSummarize = async () => {
    if (!uploadedFile) return;
    setIsLoading(true);
    setSummary(null);
    setPracticeQuestions(null);

    try {
      const payload = {
        contents: [
          {
            parts: [
              {
                text: `Summarize the following document content in a single, clear paragraph:
                
                Document Content: ${uploadedFile.content}`
              }
            ]
          }
        ],
      };
      const response = await fetch(API_URL_FLASH, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;
      setSummary(text || "Could not generate a summary. Please try again.");

    } catch (error) {
      console.error("Error summarizing document:", error);
      setSummary("Sorry, an error occurred while generating the summary.");
    } finally {
      setIsLoading(false);
    }
  };

  // Function to generate practice questions using Gemini API with JSON schema.
  const handleGenerateQuestions = async () => {
    if (!uploadedFile) return;
    setIsLoading(true);
    setSummary(null);
    setPracticeQuestions(null);

    try {
      const payload = {
        contents: [{
          parts: [{
            text: `Generate 3 multiple-choice practice questions based on the following document content. Each question should have 4 options and a single correct answer.
            
            Document Content: ${uploadedFile.content}`
          }]
        }],
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "ARRAY",
            items: {
              type: "OBJECT",
              properties: {
                "question": { "type": "STRING" },
                "options": {
                  "type": "ARRAY",
                  "items": { "type": "STRING" }
                },
                "answer": { "type": "STRING" }
              },
              "propertyOrdering": ["question", "options", "answer"]
            }
          }
        }
      };

      const response = await fetch(API_URL_FLASH, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();
      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;
      const parsedQuestions = JSON.parse(text);
      setPracticeQuestions(parsedQuestions);

    } catch (error) {
      console.error("Error generating questions:", error);
      setPracticeQuestions("Sorry, an error occurred while generating practice questions.");
    } finally {
      setIsLoading(false);
    }
  };

  // Function to read text aloud using Gemini TTS API.
  const handleReadAloud = async (text) => {
    if (isLoading || !text) return;
    setIsLoading(true);

    try {
      const payload = {
        contents: [{ parts: [{ text }] }],
        generationConfig: {
          responseModalities: ["AUDIO"],
          speechConfig: {
            voiceConfig: {
              prebuiltVoiceConfig: { voiceName: "Charon" }
            }
          }
        },
        model: "gemini-2.5-flash-preview-tts"
      };

      const response = await fetch(API_URL_TTS, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      const part = result?.candidates?.[0]?.content?.parts?.[0];
      const audioData = part?.inlineData?.data;
      const mimeType = part?.inlineData?.mimeType;

      if (audioData && mimeType && mimeType.startsWith("audio/")) {
        const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
        const pcmData = Uint8Array.from(atob(audioData), c => c.charCodeAt(0)).buffer;
        const wavBlob = pcmToWav(pcmData, sampleRate);
        const audioUrl = URL.createObjectURL(wavBlob);
        
        if (audioPlayer) audioPlayer.pause();
        const newPlayer = new Audio(audioUrl);
        newPlayer.play();
        setAudioPlayer(newPlayer);
      } else {
        console.error("Invalid audio data from API.");
      }
    } catch (error) {
      console.error("Error with Text-to-Speech:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const menuItems = [
    { id: 'dashboard', label: 'Dashboard', icon: <BarChart size={20} /> },
    { id: 'study', label: 'Study Document', icon: <Book size={20} /> },
  ];

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="p-6 md:p-8 space-y-8">
            <h2 className="text-3xl md:text-4xl font-extrabold text-gray-800">Your Study Hub</h2>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Upload Section */}
              <div className="bg-white p-6 rounded-3xl shadow-lg border-2 border-dashed border-gray-300 transition-all hover:shadow-xl">
                <h3 className="text-xl font-bold text-gray-700 mb-4">Start a New Session</h3>
                <label
                  htmlFor="file-upload"
                  className="w-full h-32 flex flex-col items-center justify-center p-4 rounded-xl cursor-pointer bg-blue-50 hover:bg-blue-100 transition-colors"
                >
                  <UploadCloud size={36} className="text-blue-500 mb-2" />
                  <span className="text-blue-600 font-semibold text-sm text-center">Click to upload your notes</span>
                  <input id="file-upload" type="file" className="hidden" onChange={handleFileUpload} accept=".pdf" />
                </label>
              </div>

              {/* Recent Files */}
              <div className="bg-white p-6 rounded-3xl shadow-lg">
                <h3 className="text-xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                  <FileText size={20} className="text-purple-500" />
                  Recent Files
                </h3>
                <ul className="space-y-3">
                  <li className="flex items-center gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors">
                    <span className="text-sm font-medium text-gray-600 truncate">Math - Algebra II Practice.pdf</span>
                    <ChevronRight size={16} className="text-gray-400 ml-auto" />
                  </li>
                  <li className="flex items-center gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors">
                    <span className="text-sm font-medium text-gray-600 truncate">World History - Ancient Rome.pdf</span>
                    <ChevronRight size={16} className="text-gray-400 ml-auto" />
                  </li>
                </ul>
              </div>

              {/* Study Suggestions */}
              <div className="bg-white p-6 rounded-3xl shadow-lg lg:col-span-2">
                <h3 className="text-xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                  <Sparkles size={20} className="text-yellow-500" />
                  Personalized Study Suggestions
                </h3>
                <div className="space-y-4 text-sm text-gray-600">
                  <p className="p-4 rounded-xl bg-yellow-50 border-l-4 border-yellow-300">
                    Based on your recent questions, you might want to review the section on **cell organelles**.
                  </p>
                  <p className="p-4 rounded-xl bg-green-50 border-l-4 border-green-300">
                    Try generating some practice questions for your **Biology 101** notes to prepare for your test.
                  </p>
                </div>
              </div>

              {/* Recent Questions */}
              <div className="bg-white p-6 rounded-3xl shadow-lg lg:col-span-1">
                <h3 className="text-xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                  <MessageCircle size={20} className="text-blue-500" />
                  Recent Questions
                </h3>
                <ul className="space-y-3">
                  {uploadedFile?.recentQuestions.map((q) => (
                    <li key={q.id} className="flex items-center gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors">
                      <span className="text-sm font-medium text-gray-600 truncate">{q.text}</span>
                      <ChevronRight size={16} className="text-gray-400 ml-auto" />
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        );

      case 'study':
        return (
          <div className="p-6 md:p-8 space-y-8">
            {uploadedFile ? (
              <>
                <h2 className="text-3xl md:text-4xl font-extrabold text-gray-800">{uploadedFile.title}</h2>
                <div className="grid lg:grid-cols-3 gap-6">
                  {/* Sidebar for actions */}
                  <div className="lg:col-span-1 space-y-4">
                    <button
                      onClick={() => setActiveTab('dashboard')}
                      className="w-full flex items-center justify-center gap-2 py-3 px-6 rounded-xl bg-gray-200 text-gray-700 font-semibold hover:bg-gray-300 transition-colors"
                    >
                      <ChevronDown size={20} /> Back to Dashboard
                    </button>
                    <div className="bg-white p-6 rounded-3xl shadow-lg space-y-4">
                      <h3 className="text-lg font-bold text-gray-700">Quick Actions</h3>
                      <button onClick={handleSummarize} disabled={isLoading} className="w-full flex items-center gap-2 p-3 rounded-lg text-left bg-blue-50 text-blue-600 font-semibold hover:bg-blue-100 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        <FileText size={20} />
                        Summarize Chapter ✨
                      </button>
                      <button onClick={handleGenerateQuestions} disabled={isLoading} className="w-full flex items-center gap-2 p-3 rounded-lg text-left bg-purple-50 text-purple-600 font-semibold hover:bg-purple-100 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        <HelpCircle size={20} />
                        Generate Practice Questions ✨
                      </button>
                      <div className="w-full flex items-center gap-2 p-3 rounded-lg text-left bg-yellow-50 text-yellow-600 font-semibold">
                        <Sparkles size={20} />
                        Key Points
                      </div>
                      <ul className="space-y-2 text-sm text-gray-600">
                        {/* Key points are still mock for simplicity */}
                        <li className="flex items-start gap-2"><Zap size={16} className="text-yellow-500 mt-1 flex-shrink-0" /><span>The cell is the basic unit of life.</span></li>
                        <li className="flex items-start gap-2"><Zap size={16} className="text-yellow-500 mt-1 flex-shrink-0" /><span>All cells have cytoplasm and a membrane.</span></li>
                        <li className="flex items-start gap-2"><Zap size={16} className="text-yellow-500 mt-1 flex-shrink-0" /><span>The nucleus holds genetic material.</span></li>
                        <li className="flex items-start gap-2"><Zap size={16} className="text-yellow-500 mt-1 flex-shrink-0" /><span>Mitochondria generate ATP (energy).</span></li>
                        <li className="flex items-start gap-2"><Zap size={16} className="text-yellow-500 mt-1 flex-shrink-0" /><span>The cell wall provides structural support.</span></li>
                      </ul>
                    </div>
                  </div>

                  {/* Main content area */}
                  <div className="lg:col-span-2 space-y-6">
                    {/* Q&A Section */}
                    <div className="bg-white p-6 rounded-3xl shadow-lg">
                      <h3 className="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <MessageCircle size={20} className="text-blue-500" />
                        Ask a Question
                      </h3>
                      {isLoading && (
                        <div className="flex items-center justify-center p-4">
                          <svg className="animate-spin h-6 w-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          <span className="ml-3 text-gray-500">Thinking...</span>
                        </div>
                      )}
                      <div className="h-64 overflow-y-auto mb-4 p-4 border rounded-xl bg-gray-50">
                        {questions.length === 0 ? (
                          <div className="text-center text-gray-400 mt-16">
                            Start a conversation about your document.
                          </div>
                        ) : (
                          questions.map((q) => (
                            <div
                              key={q.id}
                              className={`flex mb-2 ${q.isUser ? 'justify-end' : 'justify-start'}`}
                            >
                              <div
                                className={`p-3 rounded-xl max-w-lg ${
                                  q.isUser ? 'bg-blue-500 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'
                                }`}
                              >
                                {q.text}
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                      <form onSubmit={handleAskQuestion} className="flex gap-2">
                        <input
                          type="text"
                          value={inputQuestion}
                          onChange={(e) => setInputQuestion(e.target.value)}
                          placeholder="e.g., What is the function of the cell wall?"
                          className="flex-1 p-3 border rounded-xl focus:ring-2 focus:ring-blue-400 focus:outline-none"
                          disabled={isLoading}
                        />
                        <button
                          type="submit"
                          className="bg-blue-600 text-white p-3 rounded-xl font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          disabled={isLoading}
                        >
                          Ask
                        </button>
                      </form>
                    </div>

                    {/* Dynamic Content Section */}
                    {summary && (
                      <div className="bg-white p-6 rounded-3xl shadow-lg">
                        <div className="flex items-center justify-between mb-4">
                           <h3 className="text-2xl font-bold text-gray-700">Chapter Summary</h3>
                           <button onClick={() => handleReadAloud(summary)} disabled={isLoading} className="p-2 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                              <Volume2 size={20} />
                           </button>
                        </div>
                        <p className="text-gray-600 leading-relaxed">{summary}</p>
                      </div>
                    )}

                    {practiceQuestions && (
                      <div className="bg-white p-6 rounded-3xl shadow-lg">
                        <h3 className="text-2xl font-bold text-gray-700 mb-4">Practice Questions</h3>
                        <div className="space-y-6">
                          {Array.isArray(practiceQuestions) ? practiceQuestions.map((q, qIndex) => (
                            <div key={qIndex} className="p-4 rounded-xl bg-gray-50">
                              <p className="font-semibold text-gray-700 mb-2">{qIndex + 1}. {q.question}</p>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                {q.options.map((option, oIndex) => (
                                  <button
                                    key={oIndex}
                                    className="p-3 rounded-xl text-left text-gray-600 bg-white border border-gray-200 hover:bg-blue-50 hover:text-blue-600 transition-colors"
                                    onClick={() => {
                                      // Optional: Add logic for checking the answer.
                                      // alert(`You chose: "${option}". Correct answer is: "${q.answer}".`);
                                    }}
                                  >
                                    {option}
                                  </button>
                                ))}
                              </div>
                            </div>
                          )) : (
                            <p className="text-gray-600">{practiceQuestions}</p>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </>
            ) : (
              <div className="p-6 md:p-8 text-center space-y-6">
                <h2 className="text-3xl md:text-4xl font-extrabold text-gray-800">Ready to Study Smarter?</h2>
                <p className="text-gray-600 max-w-xl mx-auto">
                  Upload a PDF document to start your personalized study session. Get instant answers, summaries, and practice questions.
                </p>
                <label
                  htmlFor="file-upload"
                  className="inline-flex items-center gap-2 px-8 py-4 rounded-full bg-blue-600 text-white font-bold cursor-pointer transition-transform hover:scale-105 shadow-xl"
                >
                  <UploadCloud size={24} />
                  Upload a PDF
                  <input id="file-upload" type="file" className="hidden" onChange={handleFileUpload} accept=".pdf" />
                </label>
              </div>
            )}
          </div>
        );
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen font-sans antialiased text-gray-900">
      <style jsx="true">{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap');
        body { font-family: 'Inter', sans-serif; }
      `}</style>
      <script src="https://cdn.tailwindcss.com"></script>
      <div className="md:flex">
        {/* Sidebar Navigation */}
        <nav className="bg-white shadow-xl md:w-64 md:h-screen md:sticky md:top-0 p-4">
          <div className="flex items-center justify-between md:justify-start mb-8">
            <div className="flex items-center gap-2">
              <span className="text-3xl font-extrabold text-blue-600">StudyMate</span>
            </div>
            <button className="md:hidden p-2 rounded-xl bg-gray-200 text-gray-600">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-menu"><line x1="4" x2="20" y1="12" y2="12"></line><line x1="4" x2="20" y1="6" y2="6"></line><line x1="4" x2="20" y1="18" y2="18"></line></svg>
            </button>
          </div>
          <ul className="space-y-2">
            {menuItems.map((item) => (
              <li key={item.id}>
                <button
                  onClick={() => setActiveTab(item.id)}
                  className={`w-full flex items-center gap-3 p-3 rounded-xl transition-colors ${
                    activeTab === item.id
                      ? 'bg-blue-600 text-white shadow-md'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  {React.cloneElement(item.icon, {
                    className: activeTab === item.id ? 'text-white' : 'text-gray-500',
                  })}
                  <span className="font-semibold">{item.label}</span>
                </button>
              </li>
            ))}
          </ul>
        </nav>

        {/* Main Content Area */}
        <main className="flex-1 overflow-y-auto">
          {renderContent()}
        </main>
      </div>
    </div>
  );
};

export default App;
